'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var isArray = _interopDefault(require('is-array'));
var isString = _interopDefault(require('is-string'));
var normalizeURL = _interopDefault(require('normalize-url'));
var deepmerge = _interopDefault(require('deepmerge'));

const replaceUrlWithVars = (url, variables = {}) => {
  const regexVariables = /:[-|_|\w]+/g;
  const arrayVariables = url.match(regexVariables) || [];
  return arrayVariables.reduce((previous, current) => {
    const value = variables[current.replace(':', '')] || current;
    return previous.replace(current, value)
  }, url)
};

const joinPathArray = paths => paths.join('/');

const createUrl = (paths, variables) => {
  if (isString(paths)) {
    return replaceUrlWithVars(paths, variables)
  }
  if (isArray(paths)) {
    return replaceUrlWithVars(joinPathArray(paths), variables)
  }
};

const NOT_IMPLEMENTED = () => {
  throw 'This method was not implemented yet'
};

const hasHTTPProtocol = url => isString(url) && url.startsWith('http');

const appendURL = (...pieces) =>
  pieces.reduce((acc, current) => {
    if (isArray(current)) {
      return acc + appendURL.apply(undefined, current)
    }

    if (hasHTTPProtocol(current)) {
      return current
    }

    return `${acc}/${current}`
  }, '');

var normalizeURL$1 = (...pieces) => (options = {}) => normalizeURL(`${appendURL(pieces)}/`, options)

const DEFAULT_OPTIONS = {
  requestType: 'json',
  request: {},
  uri: {
    removeTrailingSlash: false,
  },
};

class Client {
  constructor(uri, options = {}) {
    this.options = deepmerge(DEFAULT_OPTIONS, options);
    this.uri = normalizeURL$1(uri)(this.options.uri);

    if (this.options.requestType !== DEFAULT_OPTIONS.requestType) {
      NOT_IMPLEMENTED();
    }
    this.requestType = this.options.requestType;
  }

  getURI() {
    return this.uri
  }

  static appendToURI(client, uri = '') {
    return normalizeURL$1([client.getURI(), uri])(client.options.uri)
  }

  getRequestType() {
    return this.requestType
  }
}

const createClient = (uri, options) => {
  return new Client(uri, options)
};

const isClientInstance = client$$1 => {
  if (client$$1 instanceof Client) {
    return true
  }
  return false
};

const getDefaultOptions = client$$1 => {
  switch (client$$1.getRequestType()) {
    case 'json':
      return {
        headers: {
          'Content-type': 'application/json; charset=UTF-8',
        },
      }
    default:
      throw 'Request type not allowed'
  }
};

const request = (client$$1, method) => {
  const appendToURI = Client.appendToURI.bind(undefined, client$$1);
  const DEFAULT_OPTIONS = getDefaultOptions(client$$1);

  return (uri, options = {}) => {
    return fetch(appendToURI(uri), deepmerge(DEFAULT_OPTIONS, client$$1.options.request, options))
  }
};

const getHTTPMethods = client$$1 => {
  if (!isClientInstance(client$$1)) {
    throw 'Please specify a Client to get the http methods.'
  }

  const clientRequest = request.bind(undefined, client$$1);

  return {
    post: clientRequest('POST'),
    get: clientRequest('GET'),
    upload: NOT_IMPLEMENTED,
    patch: clientRequest('PATCH'),
    put: clientRequest('PUT'),
    delete: clientRequest('DELETE'),
  }
};

exports.createUrl = createUrl;
exports.Client = Client;
exports.createClient = createClient;
exports.getHTTPMethods = getHTTPMethods;
