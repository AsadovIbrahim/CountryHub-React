'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _get = _interopDefault(require('lodash.get'));
var isPlainObject = _interopDefault(require('is-plain-object'));
var isArray = _interopDefault(require('is-array'));
var _toConsumableArray = _interopDefault(require('babel-runtime/helpers/toConsumableArray'));
var isString = _interopDefault(require('is-string'));
var normalizeURL = _interopDefault(require('normalize-url'));
var _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));
var deepmerge = _interopDefault(require('deepmerge'));
var _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));
var _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));
var _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));
var _pickBy = _interopDefault(require('lodash.pickby'));

var contentTypeIsJSON = function contentTypeIsJSON(header) {
  return header && header.includes('application/json');
};

var jsonResponse = (function (response) {
  if (contentTypeIsJSON(response.headers.get('content-type'))) {
    return Promise.all([response.json(), response]);
  }

  return Promise.resolve(response);
});

var isFormData = function isFormData(value) {
  return _get(value, 'constructor.name', '') === 'FormData';
};

var isMergeableObject = function isMergeableObject(param) {
  if (isFormData(param)) {
    return false;
  }
  return isPlainObject(param);
};

var replaceUrlWithVars = function replaceUrlWithVars(url) {
  var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var regexVariables = /:[-|_|\w]+/g;
  var arrayVariables = url.match(regexVariables) || [];
  return arrayVariables.reduce(function (previous, current) {
    var value = variables[current.replace(':', '')] || current;
    return previous.replace(current, value);
  }, url);
};

var joinPathArray = function joinPathArray(paths) {
  return paths.join('/');
};

var createUrl = function createUrl(paths, variables) {
  if (isArray(paths)) {
    return replaceUrlWithVars(joinPathArray(paths), variables);
  }
  return replaceUrlWithVars(paths, variables);
};

var NOT_IMPLEMENTED = function NOT_IMPLEMENTED() {
  throw new Error('This method was not implemented yet');
};

var hasHTTPProtocol = function hasHTTPProtocol(url) {
  return isString(url) && url.startsWith('http');
};

var appendURL = function appendURL() {
  for (var _len = arguments.length, pieces = Array(_len), _key = 0; _key < _len; _key++) {
    pieces[_key] = arguments[_key];
  }

  return pieces.reduce(function (acc, current) {
    if (isArray(current)) {
      return acc + appendURL.apply(undefined, _toConsumableArray(current));
    }

    if (hasHTTPProtocol(current)) {
      return current;
    }

    return acc + '/' + current;
  }, '');
};

var normalizeURL$1 = (function () {
  for (var _len2 = arguments.length, pieces = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    pieces[_key2] = arguments[_key2];
  }

  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var completeURL = appendURL(pieces);
    var hasParams = !!completeURL.includes('?');
    return normalizeURL('' + completeURL + (hasParams ? '' : '/'), options);
  };
});

var DEFAULT_OPTIONS = {
  requestType: 'json',
  request: {},
  uri: {
    removeTrailingSlash: false
  },
  before: [],
  after: []
};

var Client = function () {
  function Client(uri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Client);

    this.options = deepmerge(DEFAULT_OPTIONS, options, {
      isMergeableObject: isMergeableObject
    });
    this.uri = normalizeURL$1(uri)(this.options.uri);

    if (this.options.requestType !== DEFAULT_OPTIONS.requestType) {
      NOT_IMPLEMENTED();
    }
    this.requestType = this.options.requestType;
  }

  _createClass(Client, [{
    key: 'getURI',
    value: function getURI() {
      return this.uri;
    }
  }, {
    key: 'getRequestType',
    value: function getRequestType() {
      return this.requestType;
    }
  }, {
    key: 'before',
    value: function before() {
      return this.options.before;
    }
  }, {
    key: 'after',
    value: function after() {
      return this.options.after;
    }
  }, {
    key: 'appendBeforeMiddleware',
    value: function appendBeforeMiddleware(middleware) {
      var options = deepmerge(this.options, {
        before: [middleware]
      }, {
        isMergeableObject: isMergeableObject
      });
      return new Client(this.getURI(), options);
    }
  }, {
    key: 'appendAfterMiddleware',
    value: function appendAfterMiddleware(middleware) {
      var options = deepmerge(this.options, {
        after: [middleware]
      }, {
        isMergeableObject: isMergeableObject
      });
      return new Client(this.getURI(), options);
    }
  }], [{
    key: 'appendToURI',
    value: function appendToURI(client) {
      var uri = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      return normalizeURL$1([client.getURI(), uri])(client.options.uri);
    }
  }]);

  return Client;
}();

var createClient = function createClient(uri, options) {
  return new Client(uri, options);
};

var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};

var compactObject = (function (raw) {
  return raw && Object.keys(raw).filter(function (key) {
    return !isUndefined(raw[key]);
  }).reduce(function (obj, key) {
    return Object.assign({}, obj, _defineProperty({}, key, raw[key]));
  }, {});
});

var buildQueryString = (function (params) {
  return Object.keys(params).map(function (k) {
    if (Array.isArray(params[k])) {
      return params[k].map(function (val) {
        return encodeURIComponent(k) + '[]=' + encodeURIComponent(val);
      }).join('&');
    }
    return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
  }).join('&');
});

var appendParams = function appendParams() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var cleanParams = compactObject(params);
  if (cleanParams && Object.keys(cleanParams).length) {
    return (url || '') + '?' + buildQueryString(cleanParams);
  }
  return url || '';
};

var _this = undefined;

var getDefaultOptions = function getDefaultOptions(client$$1) {
  switch (client$$1.getRequestType()) {
    case 'json':
      return {
        headers: {
          'content-type': 'application/json; charset=UTF-8'
        }
      };
    default:
      throw new Error('Request type not allowed');
  }
};

var nextFunction = function nextFunction(resolve, requestData) {
  return function () {
    var newRequestData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : requestData;
    return resolve(newRequestData);
  };
};

var executeBeforeMiddleware = function executeBeforeMiddleware(client$$1, requestData) {
  return client$$1.before().reduce(function (previous, current) {
    return previous.then(function () {
      var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Promise(function (resolve, reject) {
        var mergedData = deepmerge(requestData, response, {
          isMergeableObject: isMergeableObject
        });
        current(nextFunction(resolve, mergedData), reject, mergedData);
      });
    });
  }, Promise.resolve(requestData));
};

var executeAfterMiddleware = function executeAfterMiddleware(client$$1, requestData) {
  return client$$1.after().reduce(function (previous, current) {
    return previous.then(function (response) {
      return current(response, requestData);
    });
  }, fetch(requestData.uri, requestData.options));
};

var request = function request(client$$1, method) {
  var appendToURI = Client.appendToURI.bind(null, client$$1);
  var DEFAULT_OPTIONS = getDefaultOptions(client$$1);
  var HTTP_METHOD = { method: method };

  return function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uri) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var data = arguments[2];
      var finalURI, signal, finalOptions, updatedRequestData;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              finalURI = appendToURI(uri || '');
              signal = options.signal;
              finalOptions = deepmerge.all([DEFAULT_OPTIONS, client$$1.options.request, options, HTTP_METHOD], {
                isMergeableObject: isMergeableObject
              });

              finalOptions.body = JSON.stringify(data);

              if (isFormData(data)) {
                finalOptions.body = data;
                delete finalOptions.headers['content-type'];
                delete finalOptions.headers['Content-Type'];
              }
              if (signal) {
                finalOptions.signal = signal;
              }
              updatedRequestData = null;
              _context.prev = 7;
              _context.next = 10;
              return executeBeforeMiddleware(client$$1, {
                method: method,
                options: _pickBy(finalOptions),
                uri: finalURI
              });

            case 10:
              updatedRequestData = _context.sent;
              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context['catch'](7);
              return _context.abrupt('return', Promise.reject(_context.t0));

            case 16:
              return _context.abrupt('return', executeAfterMiddleware(client$$1, updatedRequestData));

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this, [[7, 13]]);
    }));

    return function (_x4) {
      return _ref.apply(this, arguments);
    };
  }();
};

var getHTTPMethods = function getHTTPMethods(client$$1) {
  var clientRequest = request.bind(null, client$$1);

  return {
    post: function post(uri) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('POST')(uri, options, data);
    },
    get: function get(uri) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('GET')(appendParams(uri, params), options);
    },
    patch: function patch(uri) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('PATCH')(uri, options, data);
    },
    upload: function upload(uri) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('PATCH')(uri, options, data);
    },
    put: function put(uri) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('PUT')(uri, options, data);
    },
    delete: function _delete(uri) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return clientRequest('DELETE')(uri, options, data);
    }
  };
};

exports.isMergeableObject = isMergeableObject;
exports.JsonResponseMiddleware = jsonResponse;
exports.createUrl = createUrl;
exports.Client = Client;
exports.createClient = createClient;
exports.getHTTPMethods = getHTTPMethods;
